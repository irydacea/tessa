#!/usr/bin/env python3
'''
codename Tessa

Copyright (C) 2022 by Iris Morelle <iris@irydacea.me>
See COPYING for use and distribution terms.
'''

import argparse
import asyncio
import datetime
import logging
import sys
from typing import Any, Dict, List, Optional, Mapping, Union

import discord
from jsonc_parser.parser import JsoncParser
import jsonc_parser.errors

#from lib.diag import die
import lib.log as log
import lib.strutil as strutil


# Version number
TESSA_VERSION = '0.0.1'

# Configuration file path (override with -c/--config)
CONFIG_FILE_PATH = './tessa.jsonc'

# Maximum number of reactions allowed by Discord. Don't change this.
MAX_REACTIONS = 20


DiscordChannel = Union[discord.TextChannel, discord.VoiceChannel,
                       discord.Thread, discord.DMChannel, discord.GroupChannel,
                       discord.PartialMessageable]


class TessaDiscordBot(discord.Client):
    '''
    Bot application class.
    '''
    class ConfigError(Exception):
        '''
        Exception type thrown if a critical app configuration error is found.
        '''

    class ParameterError(Exception):
        '''
        Exception type thrown if a critical user parameter error is found.
        '''

    def __init__(self, *args, **kwargs):
        '''
        Constructor.

        It sets the bot's intents and initial Discord status and activity.
        '''
        self._guilds = {}
        self._autoemoji = {}
        self._bademoji = {}
        self._ignore_skintone = False

        intents = discord.Intents(guilds=True, guild_messages=True, guild_reactions=True)
        act = discord.Activity(type=discord.ActivityType.watching, name='your reactions')
        status = discord.Status.dnd

        super().__init__(*args, **kwargs, intents=intents, activity=act, status=status)

    async def on_connect(self):
        '''
        Handles the on_connect event.
        '''
        log.notice('Connected to Discord')

    async def on_ready(self):
        '''
        Handles the on_ready event.
        '''
        log.notice(f'Joined Discord as {self.user}')

    async def on_message(self, message: discord.Message):
        '''
        Handles posting of automatic reactions to new messages.
        '''
        if message.author == self.user:
            return
        if not self._is_auto_react_channel(message.guild, message.channel):
            return
        autoemoji = self._channel_autoemoji(message.guild, message.channel)
        if not autoemoji:
            return

        log.debug(f'Guild {message.guild.id} channel {message.channel.id} '
                  f'message {message.id}')

        try:
            # Clear existing reactions in case the bot is running behind other
            # guild members' ability to react to messages
            await message.clear_reactions()
            # Discord wants us to add the reactions one by one sadly
            for reaction in autoemoji:
                log.debug(f'Reaction: emote {reaction!s}' if not reaction.is_unicode_emoji() else f'Reaction: Unicode {reaction!s}')
                reaction_exec = asyncio.create_task(message.add_reaction(reaction))
                await reaction_exec
        except discord.NotFound as err:
            log.error(f'Invalid or missing reaction emoji: {err.text}')
        except discord.RateLimited as err:
            # This is global so may as well block the entire client on this
            log.error(f'Discord rate limit exceeded, waiting {err.retry_after}s')
            await asyncio.sleep(err.retry_after)
        except discord.HTTPException as err:
            log.error(f'Discord error adding reaction to message {message.id}: {err.status} {err.text}')

    async def on_reaction_add(self, reaction: discord.Reaction, _user: discord.User):
        '''
        Handles moderation of user reactions to messages.
        '''
        # NOTE: We use on_reaction_add here, not on_raw_reaction_add, so there's a risk
        #       that reactions on uncached messages will happen and we won't hear of them.
        #       For our use case this is a good enough compromise.
        if reaction.me:
            return
        message = reaction.message
        if not self._is_moderated_channel(message.guild, message.channel):
            return
        bademoji = self._channel_bademoji(message.guild, message.channel)
        if not bademoji:
            return

        log.debug(f'Reaction {reaction!s} on guild {message.guild.id} '
                  f'channel {message.channel.id} message {message.id}')

        if not str(reaction):
            log.notice('Reaction is an empty string, is discord okay?')
            return
        if isinstance(reaction.emoji, str): # Probably Unicode
            is_bad = any(str(bad) == strutil.neutral_skintone(reaction.emoji) for bad in bademoji) \
                     if self._ignore_skintone else \
                     any(str(bad) == reaction.emoji for bad in bademoji)
            if not is_bad:
                return
        elif not any(bad == reaction.emoji for bad in bademoji): # Custom
            return
        log.debug(f'Banned reaction {reaction!s} found on guild {message.guild.id} '
                  f'channel {message.channel.id} message {message.id}')
        # NOTE: we need to log the situation first, otherwise the list of users
        #       who reacted to the message is lost
        await self._do_modlog_reaction(message.guild, reaction)
        # TODO: REPEAT UNTIL THE REACTION IS FULLY GONE
        await message.clear_reaction(reaction)

    async def _do_modlog_reaction(self, guild: discord.Guild, reaction: discord.Reaction):
        '''
        Performs recording of a reaction infraction in the guild's log channel.
        '''
        modlog_cid = self._modlog_channel_id(guild)
        if not modlog_cid:
            return
        # Odds are there's only gonna be one mention, but anyway
        reactor_mentions = ', '.join([user.mention async for user in reaction.users()])
        embed_body = (f'**Deleted bad reaction in {reaction.message.channel.mention!s} '
                      f'by {reactor_mentions!s}**\n'
                      f'{reaction!s} - [Jump to message]({reaction.message.jump_url!s})')
        log_embed = discord.Embed(
            colour=discord.Colour.fuchsia(),
            description=embed_body,
            timestamp=datetime.datetime.now())
        modlog_channel = await guild.fetch_channel(modlog_cid)
        await modlog_channel.send(embed=log_embed)

    def _modlog_channel_id(self, guild: discord.Guild) -> int:
        '''
        Retrieves the numeric channel id for the guild's log channel.
        '''
        if guild.id in self._guilds:
            return self._guilds[guild.id]['event_log']
        return 0

    def _channel_config(self, guild: discord.Guild, channel: DiscordChannel) -> Optional[Dict[str, Any]]:
        '''
        Retrieves the channel configuration.
        '''
        gid = guild.id
        chan = channel.id
        if gid in self._guilds and chan in self._guilds[gid]['channels']:
            return self._guilds[gid]['channels'][chan]
        else:
            return None

    def _channel_autoemoji(self, guild: discord.Guild, channel: DiscordChannel) -> List:
        '''
        Retrieves the banned emojis list for the channel.
        '''
        cfg = self._channel_config(guild, channel)
        if cfg:
            preset = cfg.get('preset', '')
            if preset:
                return self._autoemoji.get(preset, [])
        return []

    def _channel_bademoji(self, guild: discord.Guild, channel: DiscordChannel) -> List:
        '''
        Retrieves the banned emojis list for the channel.
        '''
        cfg = self._channel_config(guild, channel)
        if cfg:
            preset = cfg.get('preset', '')
            if preset:
                return self._bademoji.get(preset, [])
        return []

    def _is_auto_react_channel(self, guild: discord.Guild, channel: DiscordChannel) -> bool:
        '''
        Helper method to check if a guild+channel pair should have automatic reactions.
        '''
        channel_config = self._channel_config(guild, channel)
        return channel_config is not None and channel_config['auto_reactions']

    def _is_moderated_channel(self, guild: discord.Guild, channel: DiscordChannel) -> bool:
        '''
        Helper method to check if a guild+channel pair should have moderated reactions.
        '''
        channel_config = self._channel_config(guild, channel)
        return channel_config is not None and channel_config['moderate_reactions']

    def read_config(self, config: Mapping[str, Any]):
        '''
        Processes the configuration JSON data.
        '''
        #
        # General configuration
        #
        self._ignore_skintone = config.get('ignore_skintone', False)

        #
        # Emoji presets (optional)
        #
        if 'presets' in config:
            presets = config['presets']
            for key, preset_cfg in presets.items():
                preset_id = str(key) # Just to make sure it's all nice for later
                autoemoji = preset_cfg.get('reactions', [])
                bademoji = preset_cfg.get('banned_reactions', [])
                if len(autoemoji) > MAX_REACTIONS:
                    log.warning(f'Excessive number of reaction emojis ({len(autoemoji)} > {MAX_REACTIONS})')
                # May copy empty lists. This is intentional so we know they
                # are empty for later. We ensure this way that both preset
                # dicts have the same keys.
                def copy_emoji_list(emojis: List[str], strip_skintone: bool = False) -> List:
                    return [
                        discord.PartialEmoji.from_str(
                            strutil.neutral_skintone(emoji) if strip_skintone
                            else emoji
                        ) for emoji in emojis
                    ]
                self._autoemoji[preset_id] = copy_emoji_list(autoemoji)
                self._bademoji[preset_id] = copy_emoji_list(bademoji, self._ignore_skintone)
                if not autoemoji and not bademoji:
                    log.warning(f'Emoji preset {preset_id} has no automatic or '
                                f'banned emoji configured, might be unintentional')
                else:
                    log.info(f'Added emoji preset {preset_id} with {len(autoemoji)} automatic '
                             f'and {len(bademoji)} banned emoji')
        #
        # Main guild configuration (required)
        #
        if 'guilds' in config:
            guilds = config['guilds']
            for guild_id_str, guild_cfg in guilds.items():
                guild_id = int(guild_id_str)
                if not guild_id: # Validation
                    raise TessaDiscordBot.ConfigError()
                if not guild_cfg.get('enabled', True):
                    log.debug(f'Skipping guild {guild_id} disabled by configuration')
                    continue
                guild_preset = str(guild_cfg.get('preset', ''))
                # We only need to look at one of the emoji preset dicts because
                # of the way we built them earlier.
                if guild_preset and guild_preset not in self._autoemoji:
                    log.error(f'Unknown preset {guild_preset} set to guild default')
                # TODO: maybe record guild preset for future reference?
                self._guilds[guild_id] = {
                    'event_log': int(guild_cfg.get('event_log', 0)),
                    'channels':  {}
                }
                # Read channel configuration
                for key in guild_cfg.keys():
                    if not key.isdigit():
                        # Key isn't a channel id
                        continue
                    channel_cfg = guild_cfg[key]
                    channel_id = int(key)
                    if not channel_id: # Validation
                        raise TessaDiscordBot.ConfigError()
                    preset = str(channel_cfg.get('preset', guild_preset))
                    auto_reactions = bool(channel_cfg.get('auto_reactions', False))
                    moderate_reactions = bool(channel_cfg.get('moderate_reactions', False))
                    if not preset:
                        log.debug(f'Skipping channel {channel_id} with no configured preset')
                        continue
                    if preset not in self._autoemoji:
                        log.debug(f'Skipping channel {channel_id} with unknown preset {preset}')
                        continue
                    if not auto_reactions and not moderate_reactions:
                        log.debug(f'Skipping channel {channel_id} with no enabled actions')
                        continue
                    self._guilds[guild_id]['channels'][channel_id] = {
                        'auto_reactions':     auto_reactions,
                        'moderate_reactions': moderate_reactions,
                        'preset':             preset,
                    }
                    log.info(f'Monitoring guild {guild_id} channel {channel_id} '
                             f'(preset: {preset} '
                             f'auto reactions: {auto_reactions}, '
                             f'moderate reactions: {moderate_reactions})')
        else:
            log.error('No guilds have been configured')
            # We really have nothing to do AT ALL without guilds
            #return


def main():
    '''
    Application entry point.
    '''
    parser = argparse.ArgumentParser()
    parser.add_argument('-d, --debug', action='store_true', dest='debug',
                        default=False,
                        help='prints extra debugging information')
    parser.add_argument('-v', '--verbose', action='store_true', dest='verbose',
                        default=False,
                        help='prints more information about actions')
    parser.add_argument('-c', '--config', action='store', type=str, dest='config',
                        default=CONFIG_FILE_PATH,
                        help='specifies the path to the Tessa configuration JSON file')
    args = parser.parse_args()

    print(f'''codename "Tessa" version {TESSA_VERSION}

    Config file path: {args.config}
''')

    logging.basicConfig(level=logging.WARNING)

    if args.verbose:
        log.set_log_level(log.LOG_LEVEL_INFO)
        logging.basicConfig(level=logging.INFO)
    if args.debug:
        log.set_log_level(log.LOG_LEVEL_DEBUG)
        logging.basicConfig(level=logging.DEBUG)

    config_fn = args.config
    config = None

    try:
        config = JsoncParser.parse_file(config_fn)
    except (jsonc_parser.errors.FileError, jsonc_parser.errors.ParserError) as err:
        log.error(f'Could not read configuration from {config_fn}: {err}')
        sys.exit(1)

    discord_token = config.get('token', None)
    if discord_token is None:
        log.error('No Discord bot token specified in the config file. Cannot continue.')
        sys.exit(1)

    client = TessaDiscordBot()
    client.read_config(config)
    client.run(discord_token)


if __name__ == '__main__':
    main()
